Census.Data <-read.csv("practical_data.csv")
library("rgdal")
library("rgeos")
Output.Areas <- readOGR(".", "Camden_oa11")
OA.Census <- merge(Output.Areas, Census.Data, by.x="OA11CD", by.y="OA")
houses <- read.csv("CamdenHouseSales15.csv")
houses <- houses[,c(1,2,8,9)]
plot(houses$oseast1m, houses$osnrth1m)
library("sp")
House.Points <-SpatialPointsDataFrame(houses[,3:4], houses, proj4string = CRS("+init=EPSG:27700"))
library("sp")
# create a House.Points SpatialPointsDataFrame
House.Points <-SpatialPointsDataFrame(houses[,3:4], houses, proj4string = CRS("+init=EPSG:27700"))
library("tmap")
tm_shape(OA.Census) + tm_borders(alpha=.4)
tm_shape(OA.Census) + tm_borders(alpha=.4) + tm_shape(House.Points) + tm_dots(col = "Price", palette = "Reds", style = "quantile")
tm_shape(OA.Census) + tm_borders(alpha=.4) + tm_shape(House.Points) + tm_dots(col = "Price", scale = 1.5, palette = "Reds", style = "quantile", title = "Price Paid (£)")
tm_shape(OA.Census) + tm_borders(alpha=.4) + tm_shape(House.Points) + tm_dots(col = "Price", scale = 1.5, palette = "Purples", style = "quantile", title = "Price Paid (£)") + tm_compass() + tm_layout(legend.text.size = 1.1, legend.title.size = 1.4, frame = FALSE)
tm_shape(OA.Census) + tm_borders(alpha=.4) + tm_shape(House.Points) + tm_bubbles(size = "Price", col = "Price", palette = "Blues", style = "quantile", legend.size.show = FALSE, title.col = "Price Paid (£)") + tm_layout(legend.text.size = 1.1, legend.title.size = 1.4, frame = FALSE)
tm_shape(OA.Census) + tm_fill("Qualification", palette = "Reds", style = "quantile", title = "% Qualification") + tm_borders(alpha=.4) + tm_shape(House.Points) + tm_bubbles(size = "Price", col = "Price", palette = "Blues", style = "quantile", legend.size.show = FALSE, title.col = "Price Paid (£)", border.col = "black", border.lwd = 0.1, border.alpha = 0.1) + tm_layout(legend.text.size = 0.8, legend.title.size = 1.1, frame = FALSE)
writeOGR(House.Points, dsn = "D:/Cloud tutorial", layer = "Camden_house_sales", driver="ESRI Shapefile")
Census.Data <-read.csv("practical_data.csv")
library("rgdal")
library("rgeos")
Output.Areas <- readOGR(".", "Camden_oa11")
OA.Census <- merge(Output.Areas, Census.Data, by.x="OA11CD", by.y="OA")
houses <- read.csv("CamdenHouseSales15.csv")
houses <- houses[,c(1,2,8,9)]
plot(houses$oseast1m, houses$osnrth1m)
library("sp")
House.Points <-SpatialPointsDataFrame(houses[,3:4], houses, proj4string = CRS("+init=EPSG:27700"))
library("sp")
# create a House.Points SpatialPointsDataFrame
House.Points <-SpatialPointsDataFrame(houses[,3:4], houses, proj4string = CRS("+init=EPSG:27700"))
library("tmap")
tm_shape(OA.Census) + tm_borders(alpha=.4)
tm_shape(OA.Census) + tm_borders(alpha=.4) + tm_shape(House.Points) + tm_dots(col = "Price", palette = "Reds", style = "quantile")
tm_shape(OA.Census) + tm_borders(alpha=.4) + tm_shape(House.Points) + tm_dots(col = "Price", scale = 1.5, palette = "Reds", style = "quantile", title = "Price Paid (£)")
tm_shape(OA.Census) + tm_borders(alpha=.4) + tm_shape(House.Points) + tm_dots(col = "Price", scale = 1.5, palette = "Purples", style = "quantile", title = "Price Paid (£)") + tm_compass() + tm_layout(legend.text.size = 1.1, legend.title.size = 1.4, frame = FALSE)
tm_shape(OA.Census) + tm_borders(alpha=.4) + tm_shape(House.Points) + tm_bubbles(size = "Price", col = "Price", palette = "Blues", style = "quantile", legend.size.show = FALSE, title.col = "Price Paid (£)") + tm_layout(legend.text.size = 1.1, legend.title.size = 1.4, frame = FALSE)
tm_shape(OA.Census) + tm_fill("Qualification", palette = "Reds", style = "quantile", title = "% Qualification") + tm_borders(alpha=.4) + tm_shape(House.Points) + tm_bubbles(size = "Price", col = "Price", palette = "Blues", style = "quantile", legend.size.show = FALSE, title.col = "Price Paid (£)", border.col = "black", border.lwd = 0.1, border.alpha = 0.1) + tm_layout(legend.text.size = 0.8, legend.title.size = 1.1, frame = FALSE)
writeOGR(House.Points, dsn = "D:/Cloud tutorial", layer = "Camden_house_sales", driver="ESRI Shapefile")
Census.Data <-read.csv("practical_data.csv")
writeOGR(House.Points, dsn = "D:/Cloud tutorial", layer = "Camden_house_sales", driver="ESRI Shapefile")
clc;
library(shiny)
runExample()
runExample("01_hello")
install.packages("shiny")
install.packages("shiny")
runExample("01_hello")
source('D:/R project/app.R')
source('D:/R project/server.R')
source('D:/R project/server.R')
library(shiny)
ui <- fluidPage (
titlePanel(title = "A geospatial analysis of offensive language on Twitter"),
sidebarLayout(
sidebarPanel(
("Enter Personal Details"),
textInput("name","Enter your name",""),
textInput("age","Enter your age",""),
radioButtons("gender","Select the Gender",list("male","Female"),""),
sliderInput("slide","Select the value from Slider",min=0,max=1000,value=50)
),
mainPanel(
h2("Personal Information"),
textOutput("myname"),
textOutput("myage"),
textOutput("mygender"),
textOutput("myslide")
)
)
)
library(shiny)
server <- function(input, output) {
output$myname<- renderText(input$name)
output$myage<- renderText(input$age)
output$mygender<- renderText(input$gender)
output$myslide<- renderText(input$slide)
}
runExample("01_hello")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
source('D:/R project/app.R')
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
source('D:/R project/app.R')
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
source('D:/R project/app.R')
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
runExample("01_hello")
runExample()
runExample("06_tabsets")
runApp('D:/R project')
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/server.R')
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
runExample("06_tabsets")
runExample()
runExample("01_hello")
source('D:/R project/app.R')
source('D:/R project/server.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
source('D:/R project/app.R')
shinyApp(ui = ui, server = server)
ui <- fluidPage (
titlePanel(title = h2("A Geospatial Analysis of Offensive Language on Twitter",align="center")),
br(),
br(),
sidebarLayout(
sidebarPanel(
sliderInput("slide",h4("Number of Tweets to Analyse"),min=0,max=1000,value=50),
submitButton(text = "Analyse", icon = NULL, width = NULL),
br(),
br(),
br()
),
mainPanel(
tabsetPanel(type = "tab",
tabPanel("BarCharts",plotOutput(outputId = "distPlot")),
tabPanel("PieCharts",plotOutput(outputId = "distPlot")),
tabPanel("Maps",plotOutput(outputId = "distPlot"))
),
br(),
br(),
br(),
downloadButton("downloadData", "Save Data")
)
)
)
library(shiny); runApp('D:/R project/server.R')
install.packages("twitteR")
runApp('D:/R project/server.R')
runApp('D:/R project/server.R')
install.packages("twitteR")
install.packages('twitteR', dependencies=TRUE, repos='http://cran.rstudio.com/')
setRepositories()
ap <- available.packages()
chooseCRANmirror()
install.packages("twitteR")
install.packages("D:/R project/twitteR_1.1.9.tar.gz", repos = NULL, type = "source")
runApp('D:/R project/server.R')
install.packages("D:/R project/twitteR_1.1.9.tar.gz", repos = NULL, type = "source")
library(twitteR)
install.packages("twitteR")
install.packages("twitteR")
install.packages(c("devtools", "rjson", "bit64", "httr"))
library(devtools)
install_github("geoffjentry/twitteR")
install.packages("dplyr")
install.packages(c("devtools", "rjson", "bit64", "httr"))
install.packages("D:/R project/twitteR_1.1.9.zip", repos = NULL, type = "win.binary")
library(twitteR)
library(twitteR)
install.packages("twitteR")
library(twitteR)
install.packages("twitteR")
install.packages("twitteR")
library(twitteR)
library(twitteR)
install.packages("twitteR")
install.packages("twitteR")
library(twitteR)
# installing/loading the latest installr package:
install.packages("installr"); library(installr) # install+load installr
updateR()
update.packages(ask = F)
update.packages(ask = F)
q()
setwd("D:/Stack Exchange Analysiz")
shiny::runApp()
runApp()
runApp()
